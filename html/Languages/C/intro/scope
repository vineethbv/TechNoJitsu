<html>
<head>
<title>Variable Scope</title>
</head>
<body>
    <h2 id="variablescope"> Varible Scope Rules</h2>
    <div class="cont">
        <p>Ascope in any programming is a region of the program where a defined variable can have
            its existence and beyond that variable cannot be accessed. There are three places where
            variables can be declared in C programming language:</p>
        <ul>
            <li>Inside a function or a block which is called local variables</li>
            <li>Outside of all functions which is called global variables.</li>
            <li>In the definition of function parameters which is called formal parameters.</li>    
        </ul>
        </div>
        <h3 id="lvariable">Local Variables</h3>
        <div class="cont">
            <p>Variables that are declared inside a function or block are called local variables. They can
                be used only by statements that are inside that function or block of code. Local variables
                are not known to functions outside their own. Following is the example using local
                variables. Here all the variables a, b and c are local to main() function.
                </p>
        </div>
        <div class="code">
        <pre>
        #include <stdio.h>
        int main ()
        {
         /* local variable declaration */
         int a, b;
         int c;
         /* actual initialization */
         a = 10;
         b = 20;
         c = a + b;
         printf ("value of a = %d, b = %d and c = %d\n", a, b, c);
         return 0;
        }
        </pre>
        </div>
        <h3 id="gvariable">Global Variables</h3>
        <div class="cont">
            <p>Global variables are defined outside of a function, usually on top of the program. The
                global variables will hold their value throughout the lifetime of your program and they can
                be accessed inside any of the functions defined for the program.<br>
                A global variable can be accessed by any function. That is, a global variable is available
                for use throughout your entire program after its declaration. Following is the example using
                global and local variables:
             </p>
        </div>
        <div class="code">
        <pre>
        #include <stdio.h>
        /* global variable declaration */
        int g;
        int main ()
        {
         /* local variable declaration */
         int a, b;
         /* actual initialization */
         a = 10;
         b = 20;
         g = a + b;
         printf ("value of a = %d, b = %d and g = %d\n", a, b, g);
         return 0;
        }
        </pre>
        </div>
        <div class="cont">
        <strong>Note:</strong>A program can have same name for local and global variables but value of local variable
        inside a function will take preference. 
        </div>
        <h3 id="formalpara">Formal Parameter</h3>
        <div class="cont">
        Function parameters, so called formal parameters, are treated as local variables within
        that function and they will take preference over the global variables.
        </div>
        <div class="code">
        <pre>
        #include <stdio.h>
        /* global variable declaration */
        int a = 20;
        int main ()
        {
         /* local variable declaration in main function */
         int a = 10;
         int b = 20;
         int c = 0;
         printf ("value of a in main() = %d\n", a);
         c = sum( a, b);
         printf ("value of c in main() = %d\n", c);
         return 0;
        }
        /* function to add two integers */
        int sum(int a, int b)
        {
         printf ("value of a in sum() = %d\n", a);
         printf ("value of b in sum() = %d\n", b);
         return a + b;
        }
        </pre>
        </div>
        <div class="cont">Output:<br>
        value of a in main() = 10
        value of a in sum() = 10
        value of b in sum() = 20
        value of c in main() = 30
        </div>
</body>
</html>
